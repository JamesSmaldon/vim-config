set nocompatible "required for vundle
filetype off "required for vundle


" rtp (runtimepaths) is a list of comma seperated paths, the first
" of which is the vimfiles directory
let $VIMFILESDIR=split(&rtp, ",")[0]

let $VIMTIPS="$VIMFILESDIR/vimtips.md"
let $VSTIPS="$VIMFILESDIR/vstips.md"

set rtp+=$VIMFILESDIR/bundle/Vundle.vim

if has('gui_running')
    call vundle#begin('$VIMFILESDIR/bundle/')
    Plugin 'VundleVim/Vundle.vim'
    Plugin 'tpope/vim-fugitive'             " Git wrapper plugin
    Plugin 'sjl/badwolf'                    " Colour scheme
    Plugin 'ctrlpvim/ctrlp.vim'             " Fuzzy search for files etc.
    Plugin 'vim-airline/vim-airline'        " powerline style plugin in pure vimscript
    Plugin 'scrooloose/nerdtree'            " Tree based navigation of filesystem
    Plugin 'dkprice/vim-easygrep'           " Find and replace text across multiple files.
    Plugin 'ludovicchabant/vim-lawrencium'  " mercurial support
    Plugin 'yegappan/mru'                   " A better recent files list
    " Provides motions (prefixed by ,) that mean word boundaries in camel case and underscore notation are respected.
    Plugin 'vim-scripts/camelcasemotion'
    " Agglomerates all the best syntax highlighting plugins
    Plugin 'sheerun/vim-polyglot'
    " Adds functionality to surround text with things like brackets etc.
    Plugin 'tpope/vim-surround'
    " Adds functionality to easily comment blocks of code
    Plugin 'tpope/vim-commentary'
    " Makes substitutions work properly for visual blocks.
    Plugin 'vim-scripts/vis'
    call vundle#end()
endif

filetype plugin indent on " required by vundle

" Make the ctrlp plugin display up to 100 results rather than the default of
" 10
let g:ctrlp_match_window = 'results:100'

" Add VCS support to vim-airline plugin
let g:airline#extensions#branch#use_vcscommand = 1

set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab " tabs are spaces
set smarttab
set ignorecase " ignore case when searching
set smartcase " except when search term has capital letter
set laststatus=2    "Always display the status bar.
set incsearch " Make searches incremental

set number " enable line numbers
syntax on " syntax highlighting

if has('gui_running')
    silent! colorscheme badwolf
endif

set cursorline " highlight current line
set wildmenu " graphical auto-complete menu for tab completion
set showmatch " highlight matching parentheses
set hlsearch " highlight search matches
set path=.,,** " Search path for opening new files etc.

" Folding
set foldenable " disable folding blocks.
set foldnestmax=1 " Don't do nested folding
set foldlevelstart=99 " Start with all folds open
set foldminlines=5 " Don't bother folding small functions
set foldmethod=syntax " Fold using indentation (good for python)
au FileType python setlocal foldmethod=indent " syntax folding doesn't work for python, use indent instead (but only for current buffer).
" remap space to toggle fold under the cursor.
nnoremap <space> za

augroup textfiles
    autocmd!
    autocmd BufRead,BufNewFile  *.txt setlocal tw=80
    autocmd BufRead,BufNewFile  *.txt setlocal spell spelllang=en_gb
augroup END

" Make backspace behave correctly.
set backspace=indent,eol,start

" Make underscores act as word boundaries, this is useful when doing commands
" like ciw on strings like my_variable_name.
set iskeyword-=_

if has("win32")
    set guifont=Consolas:h10
else
    set guifont=Inconsolata\ 9
endif

" Open vimtips rather than help when F1 pressed.
nmap <F1> :tabe $VIMTIPS<CR>
imap <F1> <Esc><F1>

" Open explore window for current buffer path
nmap <F11> :!start explorer /e,%:p:h<CR>
imap <F11> <Esc><F11>

" Open command prompt for current buffer path
nmap <F12> :!start cmd %:p:h<CR>
imap <F12> <Esc><F12>

" Refresh current file
map <F5> :e<CR>G
imap <F5> <Esc><F5>

" Function to remove whitespace from the end of all lines in the file.
function! TrimTrailingWS ()
    if search('\s\+$', 'cnw') " if we find any spaces before end of line
        :%s/\s\+$//g " Perform global search and replace of spaces at end of lines.
    endif
endfunction

" Highlight first character in line that goes over 80/100 chars
augroup highlightlonglines
    autocmd!
    autocmd FileType python,cpp highlight ColorColumn ctermbg=magenta guibg=gray27
    autocmd FileType python,cpp call matchadd('ColorColumn', '\%81v', 100)
    autocmd FileType python,cpp call matchadd('ColorColumn', '\%101v', 100)
augroup END

" Show undesirable characters
set listchars=tab:>>,nbsp:_,trail:.
set list
